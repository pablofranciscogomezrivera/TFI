// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Tests.Features
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class RegistroDeAdmisionDePacientesEnUrgenciasFeature : object, Xunit.IClassFixture<RegistroDeAdmisionDePacientesEnUrgenciasFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Registro de admisión de pacientes en urgencias", "  Como enfermera\r\n  Quiero poder registrar las admisiones de los pacientes a urge" +
                "ncias\r\n  Para determinar qué pacientes tienen mayor prioridad de atención", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "UrgenciasIngreso.feature"
#line hidden
        
        public RegistroDeAdmisionDePacientesEnUrgenciasFeature(RegistroDeAdmisionDePacientesEnUrgenciasFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
            {
                await testRunner.OnFeatureEndAsync();
            }
            if ((testRunner.FeatureContext == null))
            {
                await testRunner.OnFeatureStartAsync(featureInfo);
            }
        }
        
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        public virtual async System.Threading.Tasks.Task FeatureBackgroundAsync()
        {
#line 6
  #line hidden
#line 7
    await testRunner.GivenAsync("que la enfermera \"María Pérez\" está logueada en el sistema", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            await this.TestInitializeAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Registrar ingreso de un paciente existente con todos los datos correctos")]
        [Xunit.TraitAttribute("FeatureTitle", "Registro de admisión de pacientes en urgencias")]
        [Xunit.TraitAttribute("Description", "Registrar ingreso de un paciente existente con todos los datos correctos")]
        [Xunit.TraitAttribute("Category", "Exito")]
        public async System.Threading.Tasks.Task RegistrarIngresoDeUnPacienteExistenteConTodosLosDatosCorrectos()
        {
            string[] tagsOfScenario = new string[] {
                    "Exito"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Registrar ingreso de un paciente existente con todos los datos correctos", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 10
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
  await this.FeatureBackgroundAsync();
#line hidden
#line 11
    await testRunner.GivenAsync("que el paciente con DNI \"12345678\" existe en el sistema", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
                global::Reqnroll.Table table7 = new global::Reqnroll.Table(new string[] {
                            "informe",
                            "\"Paciente presenta dolor toracico agudo\""});
                table7.AddRow(new string[] {
                            "nivelEmergencia",
                            "\"Critica\""});
                table7.AddRow(new string[] {
                            "temperatura",
                            "38.5"});
                table7.AddRow(new string[] {
                            "frecuenciaCardiaca",
                            "95"});
                table7.AddRow(new string[] {
                            "frecuenciaRespiratoria",
                            "20"});
                table7.AddRow(new string[] {
                            "tensionSistolica",
                            "120"});
                table7.AddRow(new string[] {
                            "tensionDiastolica",
                            "80"});
#line 12
    await testRunner.WhenAsync("registro un ingreso con los siguientes datos:", ((string)(null)), table7, "When ");
#line hidden
#line 20
    await testRunner.ThenAsync("el ingreso se registra exitosamente con estado \"PENDIENTE\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 21
    await testRunner.AndAsync("el paciente entra a la cola de atención", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 22
    await testRunner.AndAsync("la enfermera \"María Pérez\" queda registrada en el ingreso", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Registrar ingreso de un paciente no existente")]
        [Xunit.TraitAttribute("FeatureTitle", "Registro de admisión de pacientes en urgencias")]
        [Xunit.TraitAttribute("Description", "Registrar ingreso de un paciente no existente")]
        [Xunit.TraitAttribute("Category", "CreacionPaciente")]
        public async System.Threading.Tasks.Task RegistrarIngresoDeUnPacienteNoExistente()
        {
            string[] tagsOfScenario = new string[] {
                    "CreacionPaciente"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Registrar ingreso de un paciente no existente", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 25
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
  await this.FeatureBackgroundAsync();
#line hidden
#line 26
    await testRunner.GivenAsync("que el paciente con DNI \"87654321\" no existe en el sistema", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
                global::Reqnroll.Table table8 = new global::Reqnroll.Table(new string[] {
                            "informe",
                            "\"Paciente con fractura expuesta\""});
                table8.AddRow(new string[] {
                            "nivelEmergencia",
                            "\"Emergencia\""});
                table8.AddRow(new string[] {
                            "temperatura",
                            "37.0"});
                table8.AddRow(new string[] {
                            "frecuenciaCardiaca",
                            "88"});
                table8.AddRow(new string[] {
                            "frecuenciaRespiratoria",
                            "22"});
                table8.AddRow(new string[] {
                            "tensionSistolica",
                            "130"});
                table8.AddRow(new string[] {
                            "tensionDiastolica",
                            "85"});
#line 27
    await testRunner.WhenAsync("intento registrar su ingreso con los siguientes datos:", ((string)(null)), table8, "When ");
#line hidden
#line 35
    await testRunner.ThenAsync("el sistema crea al paciente", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 36
    await testRunner.AndAsync("el ingreso queda registrado con estado \"PENDIENTE\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Registrar ingreso con datos mandatorios faltantes")]
        [Xunit.TraitAttribute("FeatureTitle", "Registro de admisión de pacientes en urgencias")]
        [Xunit.TraitAttribute("Description", "Registrar ingreso con datos mandatorios faltantes")]
        [Xunit.TraitAttribute("Category", "Validaciones")]
        public async System.Threading.Tasks.Task RegistrarIngresoConDatosMandatoriosFaltantes()
        {
            string[] tagsOfScenario = new string[] {
                    "Validaciones"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Registrar ingreso con datos mandatorios faltantes", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 39
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
  await this.FeatureBackgroundAsync();
#line hidden
#line 40
    await testRunner.GivenAsync("que el paciente con DNI \"12345678\" existe en el sistema", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 41
    await testRunner.WhenAsync("intento registrar el ingreso sin informar la \"frecuenciaCardiaca\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 42
    await testRunner.ThenAsync("el sistema muestra un error indicando que \"frecuenciaCardiaca\" es mandatorio", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Registrar ingreso con valores negativos en frecuencia")]
        [Xunit.TraitAttribute("FeatureTitle", "Registro de admisión de pacientes en urgencias")]
        [Xunit.TraitAttribute("Description", "Registrar ingreso con valores negativos en frecuencia")]
        [Xunit.TraitAttribute("Category", "Validaciones")]
        public async System.Threading.Tasks.Task RegistrarIngresoConValoresNegativosEnFrecuencia()
        {
            string[] tagsOfScenario = new string[] {
                    "Validaciones"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Registrar ingreso con valores negativos en frecuencia", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 45
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
  await this.FeatureBackgroundAsync();
#line hidden
#line 46
    await testRunner.GivenAsync("que el paciente con DNI \"12345678\" existe en el sistema", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 47
    await testRunner.WhenAsync("intento registrar el ingreso con frecuenciaCardiaca -70 y frecuenciaRespiratoria " +
                        "-15", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 48
    await testRunner.ThenAsync("el sistema muestra un error indicando que las frecuencias no pueden ser negativas" +
                        "", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Registrar ingreso sin el informe del paciente")]
        [Xunit.TraitAttribute("FeatureTitle", "Registro de admisión de pacientes en urgencias")]
        [Xunit.TraitAttribute("Description", "Registrar ingreso sin el informe del paciente")]
        [Xunit.TraitAttribute("Category", "Validaciones")]
        public async System.Threading.Tasks.Task RegistrarIngresoSinElInformeDelPaciente()
        {
            string[] tagsOfScenario = new string[] {
                    "Validaciones"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Registrar ingreso sin el informe del paciente", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 51
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
  await this.FeatureBackgroundAsync();
#line hidden
#line 52
     await testRunner.GivenAsync("que el paciente con DNI \"12345678\" existe en el sistema", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 53
     await testRunner.WhenAsync("intento registrar el ingreso sin informar el \"informe\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 54
     await testRunner.ThenAsync("el sistema muestra un error indicando que \"informe\" es mandatorio", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Ingreso de paciente con mayor prioridad que los ya en espera")]
        [Xunit.TraitAttribute("FeatureTitle", "Registro de admisión de pacientes en urgencias")]
        [Xunit.TraitAttribute("Description", "Ingreso de paciente con mayor prioridad que los ya en espera")]
        [Xunit.TraitAttribute("Category", "Prioridad")]
        public async System.Threading.Tasks.Task IngresoDePacienteConMayorPrioridadQueLosYaEnEspera()
        {
            string[] tagsOfScenario = new string[] {
                    "Prioridad"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Ingreso de paciente con mayor prioridad que los ya en espera", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 57
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
  await this.FeatureBackgroundAsync();
#line hidden
#line 58
    await testRunner.GivenAsync("que hay un paciente \"B\" en espera con nivel de emergencia \"Urgencia\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 59
    await testRunner.AndAsync("que el paciente \"A\" con DNI \"11111111\" existe en el sistema", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 60
    await testRunner.WhenAsync("registro un ingreso para el paciente \"A\" con nivel de emergencia \"Crítica\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 61
    await testRunner.ThenAsync("el paciente \"A\" debe ser atendido antes que el paciente \"B\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Ingreso de paciente con igual nivel de emergencia que otro")]
        [Xunit.TraitAttribute("FeatureTitle", "Registro de admisión de pacientes en urgencias")]
        [Xunit.TraitAttribute("Description", "Ingreso de paciente con igual nivel de emergencia que otro")]
        [Xunit.TraitAttribute("Category", "Prioridad")]
        public async System.Threading.Tasks.Task IngresoDePacienteConIgualNivelDeEmergenciaQueOtro()
        {
            string[] tagsOfScenario = new string[] {
                    "Prioridad"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Ingreso de paciente con igual nivel de emergencia que otro", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 64
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
  await this.FeatureBackgroundAsync();
#line hidden
#line 65
    await testRunner.GivenAsync("que hay un paciente \"B\" en espera con nivel de emergencia \"Emergencia\" ingresado " +
                        "a las 14:00", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 66
    await testRunner.AndAsync("que el paciente \"A\" con DNI \"22222222\" existe en el sistema", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 67
    await testRunner.WhenAsync("registro un ingreso para el paciente \"A\" con nivel de emergencia \"Emergencia\" a l" +
                        "as 14:05", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 68
    await testRunner.ThenAsync("el paciente \"B\" debe ser atendido antes que el paciente \"A\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Ingreso de paciente con menor prioridad que los ya en espera")]
        [Xunit.TraitAttribute("FeatureTitle", "Registro de admisión de pacientes en urgencias")]
        [Xunit.TraitAttribute("Description", "Ingreso de paciente con menor prioridad que los ya en espera")]
        [Xunit.TraitAttribute("Category", "Prioridad")]
        public async System.Threading.Tasks.Task IngresoDePacienteConMenorPrioridadQueLosYaEnEspera()
        {
            string[] tagsOfScenario = new string[] {
                    "Prioridad"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Ingreso de paciente con menor prioridad que los ya en espera", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 71
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
  await this.FeatureBackgroundAsync();
#line hidden
#line 72
    await testRunner.GivenAsync("que hay un paciente \"B\" en espera con nivel de emergencia \"Emergencia\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 73
    await testRunner.AndAsync("que el paciente \"C\" con DNI \"33333333\" existe en el sistema", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 74
    await testRunner.WhenAsync("registro un ingreso para el paciente \"C\" con nivel de emergencia \"Urgencia\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 75
    await testRunner.ThenAsync("el paciente \"B\" debe ser atendido antes que el paciente \"C\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await RegistroDeAdmisionDePacientesEnUrgenciasFeature.FeatureSetupAsync();
            }
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await RegistroDeAdmisionDePacientesEnUrgenciasFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
